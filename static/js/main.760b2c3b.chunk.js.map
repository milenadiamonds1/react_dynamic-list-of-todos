{"version":3,"sources":["enums/SortType.tsx","components/TodoList/TodoList.tsx","helpers/getTodoType.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","helpers/filterTodos.tsx","index.tsx"],"names":["SortType","TodoList","todos","activeId","onSelectTodo","className","map","todo","completed","title","id","isIdActive","classNames","type","onClick","TodoFilter","query","onQueryChange","sortType","onSortTypeChange","value","onChange","event","Active","Completed","All","getTodoType","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","getUser","userId","Loader","TodoModal","onClose","useState","user","setUser","useEffect","getUserFromServer","a","userFromServer","href","email","name","App","setTodos","currentTodoId","setCurrentTodoId","listLoad","setListLoad","setQuery","setSortType","todosFromServer","getTodosFromServer","currentTodo","find","visibleTodos","normalQuery","toLowerCase","split","filter","Boolean","join","isTitleIncludesQuery","includes","currentStatus","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.760b2c3b.chunk.js","sourcesContent":["export enum SortType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  activeId: number;\n  onSelectTodo: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  activeId,\n  onSelectTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo: Todo) => {\n          const {\n            completed, title, id,\n          } = todo;\n          const isIdActive = id === activeId;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              key={id}\n              className={classNames({\n                'has-background-info-light': isIdActive,\n              })}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames('has-text-success', {\n                    'has-text-danger': !completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelectTodo(id)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far',\n                      { 'fa-eye-slash': isIdActive },\n                      { 'fa-eye': !isIdActive },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { SortType } from '../enums/SortType';\n\nexport const getTodoType = (type: string) => {\n  switch (type) {\n    case SortType.Active:\n      return SortType.Active;\n\n    case SortType.Completed:\n      return SortType.Completed;\n\n    case SortType.All:\n    default:\n      return SortType.All;\n  }\n};\n","import { FC } from 'react';\nimport { SortType } from '../../enums/SortType';\nimport { getTodoType } from '../../helpers/getTodoType';\n\ntype Props = {\n  query: string;\n  onQueryChange: (query: string) => void;\n  sortType:SortType,\n  onSortTypeChange: (type: SortType) => void;\n};\n\nexport const TodoFilter: FC<Props> = ({\n  query,\n  onQueryChange,\n  sortType,\n  onSortTypeChange,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={sortType}\n            onChange={\n              (event) => onSortTypeChange(getTodoType(event.target.value))\n            }\n          >\n            <option value=\"all\">\n              All\n            </option>\n\n            <option value=\"active\">\n              Active\n            </option>\n\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input is-info\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query !== '' && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChange('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport function get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface Props {\n  todo: Todo;\n  onClose: () => void,\n}\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const {\n    title,\n    completed,\n    id,\n    userId,\n  } = todo;\n\n  useEffect(() => {\n    const getUserFromServer = async () => {\n      try {\n        const userFromServer = await getUser(userId);\n\n        setUser(userFromServer);\n      } catch (error) {\n        setUser(null);\n      }\n    };\n\n    getUserFromServer();\n  }, [user]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onClose()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block has-text-dark\" data-cy=\"modal-user\">\n              <strong\n                className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n              >\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { SortType } from './enums/SortType';\nimport { filterTodos } from './helpers/filterTodos';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [currentTodoId, setCurrentTodoId] = useState(0);\n  const [listLoad, setListLoad] = useState(false);\n  const [query, setQuery] = useState('');\n  const [sortType, setSortType] = useState(SortType.All);\n\n  async function getTodosFromServer() {\n    setListLoad(true);\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n    } catch (error) {\n      setTodos([]);\n    }\n\n    setListLoad(false);\n  }\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const currentTodo = todos.find(todo => todo.id === currentTodoId);\n\n  const closeTodo = () => setCurrentTodoId(0);\n\n  const visibleTodos = filterTodos(todos, sortType, query);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQueryChange={setQuery}\n                sortType={sortType}\n                onSortTypeChange={setSortType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {listLoad ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  activeId={currentTodoId}\n                  onSelectTodo={setCurrentTodoId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal todo={currentTodo} onClose={closeTodo} />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { SortType } from '../enums/SortType';\n\nexport const filterTodos = (\n  todos:Todo[],\n  sortType:SortType,\n  query:string,\n) => {\n  const normalQuery = query\n    .toLowerCase()\n    .split(' ')\n    .filter(Boolean)\n    .join(' ');\n\n  if (query || sortType !== SortType.All) {\n    return todos.filter(todo => {\n      const isTitleIncludesQuery = todo.title\n        .toLowerCase()\n        .includes(normalQuery);\n\n      let currentStatus = true;\n\n      switch (sortType) {\n        case SortType.Active:\n          currentStatus = todo.completed === false;\n          break;\n\n        case SortType.Completed:\n          currentStatus = todo.completed === true;\n          break;\n\n        default:\n          currentStatus = true;\n          break;\n      }\n\n      return isTitleIncludesQuery && currentStatus;\n    });\n  }\n\n  return todos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}